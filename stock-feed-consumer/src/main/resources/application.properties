server.port=8081
spring.application.name=stock-feed-consumer
spring.kafka.bootstrap-servers: localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.stock_feed_consumer.incomingEvent
#spring.kafka.consumer.properties.spring.json.value.default.type=OrderEvent:com.example.kafka_messaging_demo.dto.OrderEvent,InventoryEvent:com.example.kafka_messaging_demo.dto.InventoryEvent
spring.kafka.consumer.properties.spring.json.use.type.headers=true

# Producer Configs
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

#      Only need when you are thinking that Serialization and deserialization should be done by Spring
#      producer:
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer
#        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      consumer:
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#        properties:
#          spring.json.trusted.packages: "com.example.stock_feed_consumer.incomingEvent"
#          spring.json.value.default.type: com.example.stock_feed_consumer.incomingEvent.*
#          spring.json.use.type.headers: false