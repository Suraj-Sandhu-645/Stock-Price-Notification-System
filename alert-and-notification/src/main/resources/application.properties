server.port=8084

spring.application.name=alert-and-notification
spring.kafka.bootstrap-servers=localhost:9092

# Consumer Configs
spring.kafka.consumer.group-id=stock-alert-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.common_events.dto
spring.kafka.consumer.properties.spring.json.use.type.headers=true

# Producer Configs
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


#? Rule of Thumb
#           Use Case                            Group ID Strategy
#One service, multiple topics, load-balanced	? One group ID
#Independent processing per topic	            ? One group ID per topic
#Need both listeners to see the same messages	? Different group IDs
#Microservices with their own responsibility	? Separate group IDs per service/topic

